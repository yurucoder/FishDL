# 신경망 3 - 출력층 설계하기

import numpy as np

# 분류와 회귀
# 분류: 데이터가 어떤 클래스에 속하는지 맞추기 eg. 사진 속 인물의 성별 분류
# 회귀: 입력 데이터에서 연속적인 수치 예측 eg. 사진 속 인물의 몸무게 예측

# 출력층에서의 활성화 함수 사용
# 회귀에는 항등 함수, 분류에는 소프트맥스 함수를 사용한다.

# 소프트맥스 함수 구현

a = np.array([0.3, 2.9, 4.0])


def softmax1(a):
    exp_a = np.exp(a)  # e^a 배열
    sum_exp_a = np.sum(exp_a)  # e^a 의 총합
    y = exp_a / sum_exp_a  # 소프트맥스

    return y


# 입력값이 너무 큰 경우, 오버플로 애러가 날 수 있다.
a = np.array([1010, 1000, 990])
print(np.exp(a) / np.sum(np.exp(a)))  # [nan, nan, nan]


# 수식을 변형하며 오버플로가 나지 않게 조정하였다.
def softmax2(a):
    c = np.max(a)
    exp_a = np.exp(a - c)  # 오버플로 대책
    sum_exp_a = np.sum(exp_a)
    y = exp_a / sum_exp_a

    return y


print(softmax2(a))  # 값이 출력된다.


# 소프트맥스 함수의 특징

a = np.array([0.3, 2.9, 4.0])
y = softmax2(a)
print(y)  # 늘 0과 1 사이의 실수이다. [0.01821127 0.24519181 0.73659691]
print(np.sum(y))  # 총합은 1이다.

# 총합이 1인 성질은 '확률'로 해석될 수 있다!
# 위 예시의 경우, 각각 [1.8%, 24.5%, 73.7%]

# 다만, exp 함수는 단조 증가함수이므로 그 대소관계가 변하지 않는다.
# 따라서 값을 구하는 것이 아닌, 단순 분류 상황이라면 생략하는 것이 일반적이다.

# 출력층의 뉴런 개수는 분류하고자 하는 클래스 개수로 결정한다.
# 예를 들어 입력 이미지를 숫자 0에서 9 중 하나로 분류하고 싶다면, 뉴런은 10로 설정한다.
